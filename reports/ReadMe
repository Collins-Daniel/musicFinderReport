Reports are generated by a workflow in a public repository (https://github.com/Collins-Daniel/musicFinderReport) which is triggered in this repo. This scan is run against the code in the other repo which is identical to this one, and a link is given as part of the output of the action in this private repo.
The link can be found in the output of sonar.yml.

********************************************************************************
INITIAL REPORT
********************************************************************************

Each java file was given a rating of A except for the MusicFinderController, which recieved an overall rating of C. The complaints were all with respect to code smells, vulnerabilities, and parts of the code which were not
covered by tests. We will focus on one major code smell and one major vulnerability.

-Major Code Smell

Within getFormattedLyrics() we have a new instantiation of an object mapper: "ObjectMapper objectMapper = new ObjectMapper();". However, this shadows the name of an object mapper declared on line 15. This would cause confusion and maybe some unexpected behavior if the wrong instantiation was used. We should rename this objectMapper or use the one with a larger scope to rectify this.

-Major Vulnerability

Within this same 'getFormattedLyrics()' function, the users input is used directly in the creation of a url for querying. This leaves the code vulnerable to an SSRF (Server Side Forgery) attack which is very similar to a cross sit scripting attack. An attacker could potentially exploit this implementation to gain access to information or functionality within the servers scope which he/she would not otherwise have access to. We need to find a new implementation to add some security to this feature.

********************************************************************************
AFTER REPORT
********************************************************************************

After implenting some changes, the static analysis has returned an overall grade of A for all files once these 2 previous issues were fixed.
What we did:

-code smell
Renamed objectMapper to mapper in the getFormattedLyrics function to avoid shadowing

-vulnerabilty
Used a urlEncoder to encode the url parameters, to prevent any funky use of special characters that the attacker could exploit. Also instead of using a string, a URI component is used to handle the query.



The OwaspZap scans can be found in this reports folder. --No critical vulnerabilities were found, so instead mitigated a medium alert on the content security policy header.